// Generated by gencpp from file server_interface/LockOnRequest.msg
// DO NOT EDIT!


#ifndef SERVER_INTERFACE_MESSAGE_LOCKONREQUEST_H
#define SERVER_INTERFACE_MESSAGE_LOCKONREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace server_interface
{
template <class ContainerAllocator>
struct LockOnRequest_
{
  typedef LockOnRequest_<ContainerAllocator> Type;

  LockOnRequest_()
    : target_id(0)
    , center_x(0)
    , center_y(0)
    , width(0)
    , height(0)  {
    }
  LockOnRequest_(const ContainerAllocator& _alloc)
    : target_id(0)
    , center_x(0)
    , center_y(0)
    , width(0)
    , height(0)  {
  (void)_alloc;
    }



   typedef int32_t _target_id_type;
  _target_id_type target_id;

   typedef int32_t _center_x_type;
  _center_x_type center_x;

   typedef int32_t _center_y_type;
  _center_y_type center_y;

   typedef int32_t _width_type;
  _width_type width;

   typedef int32_t _height_type;
  _height_type height;





  typedef boost::shared_ptr< ::server_interface::LockOnRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::server_interface::LockOnRequest_<ContainerAllocator> const> ConstPtr;

}; // struct LockOnRequest_

typedef ::server_interface::LockOnRequest_<std::allocator<void> > LockOnRequest;

typedef boost::shared_ptr< ::server_interface::LockOnRequest > LockOnRequestPtr;
typedef boost::shared_ptr< ::server_interface::LockOnRequest const> LockOnRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::server_interface::LockOnRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::server_interface::LockOnRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::server_interface::LockOnRequest_<ContainerAllocator1> & lhs, const ::server_interface::LockOnRequest_<ContainerAllocator2> & rhs)
{
  return lhs.target_id == rhs.target_id &&
    lhs.center_x == rhs.center_x &&
    lhs.center_y == rhs.center_y &&
    lhs.width == rhs.width &&
    lhs.height == rhs.height;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::server_interface::LockOnRequest_<ContainerAllocator1> & lhs, const ::server_interface::LockOnRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace server_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::server_interface::LockOnRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::server_interface::LockOnRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::server_interface::LockOnRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::server_interface::LockOnRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::server_interface::LockOnRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::server_interface::LockOnRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::server_interface::LockOnRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b58023b0d8b3c5e5abc0d1fb60b78a38";
  }

  static const char* value(const ::server_interface::LockOnRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb58023b0d8b3c5e5ULL;
  static const uint64_t static_value2 = 0xabc0d1fb60b78a38ULL;
};

template<class ContainerAllocator>
struct DataType< ::server_interface::LockOnRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "server_interface/LockOnRequest";
  }

  static const char* value(const ::server_interface::LockOnRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::server_interface::LockOnRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 target_id\n"
"int32 center_x\n"
"int32 center_y\n"
"int32 width\n"
"int32 height\n"
;
  }

  static const char* value(const ::server_interface::LockOnRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::server_interface::LockOnRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.target_id);
      stream.next(m.center_x);
      stream.next(m.center_y);
      stream.next(m.width);
      stream.next(m.height);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LockOnRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::server_interface::LockOnRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::server_interface::LockOnRequest_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "target_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.target_id);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "center_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.center_x);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "center_y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.center_y);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "width: ";
    Printer<int32_t>::stream(s, indent + "  ", v.width);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "height: ";
    Printer<int32_t>::stream(s, indent + "  ", v.height);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SERVER_INTERFACE_MESSAGE_LOCKONREQUEST_H
