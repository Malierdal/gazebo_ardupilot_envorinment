// Generated by gencpp from file autonomous_locking/Target.msg
// DO NOT EDIT!


#ifndef AUTONOMOUS_LOCKING_MESSAGE_TARGET_H
#define AUTONOMOUS_LOCKING_MESSAGE_TARGET_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Twist.h>

namespace autonomous_locking
{
template <class ContainerAllocator>
struct Target_
{
  typedef Target_<ContainerAllocator> Type;

  Target_()
    : id(0)
    , pose()
    , velocity()
    , heading(0.0)
    , speed(0.0)
    , time_delay(0.0)
    , distance(0.0)
    , tail_angle(0.0)
    , heading_alignment(0.0)
    , zone_score(0.0)
    , total_cost(0.0)  {
    }
  Target_(const ContainerAllocator& _alloc)
    : id(0)
    , pose(_alloc)
    , velocity(_alloc)
    , heading(0.0)
    , speed(0.0)
    , time_delay(0.0)
    , distance(0.0)
    , tail_angle(0.0)
    , heading_alignment(0.0)
    , zone_score(0.0)
    , total_cost(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;

   typedef float _heading_type;
  _heading_type heading;

   typedef float _speed_type;
  _speed_type speed;

   typedef float _time_delay_type;
  _time_delay_type time_delay;

   typedef float _distance_type;
  _distance_type distance;

   typedef float _tail_angle_type;
  _tail_angle_type tail_angle;

   typedef float _heading_alignment_type;
  _heading_alignment_type heading_alignment;

   typedef float _zone_score_type;
  _zone_score_type zone_score;

   typedef float _total_cost_type;
  _total_cost_type total_cost;





  typedef boost::shared_ptr< ::autonomous_locking::Target_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autonomous_locking::Target_<ContainerAllocator> const> ConstPtr;

}; // struct Target_

typedef ::autonomous_locking::Target_<std::allocator<void> > Target;

typedef boost::shared_ptr< ::autonomous_locking::Target > TargetPtr;
typedef boost::shared_ptr< ::autonomous_locking::Target const> TargetConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autonomous_locking::Target_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autonomous_locking::Target_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::autonomous_locking::Target_<ContainerAllocator1> & lhs, const ::autonomous_locking::Target_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.pose == rhs.pose &&
    lhs.velocity == rhs.velocity &&
    lhs.heading == rhs.heading &&
    lhs.speed == rhs.speed &&
    lhs.time_delay == rhs.time_delay &&
    lhs.distance == rhs.distance &&
    lhs.tail_angle == rhs.tail_angle &&
    lhs.heading_alignment == rhs.heading_alignment &&
    lhs.zone_score == rhs.zone_score &&
    lhs.total_cost == rhs.total_cost;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::autonomous_locking::Target_<ContainerAllocator1> & lhs, const ::autonomous_locking::Target_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace autonomous_locking

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::autonomous_locking::Target_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autonomous_locking::Target_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autonomous_locking::Target_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autonomous_locking::Target_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autonomous_locking::Target_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autonomous_locking::Target_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autonomous_locking::Target_<ContainerAllocator> >
{
  static const char* value()
  {
    return "563c719c20ae1eacdb952c207c883d48";
  }

  static const char* value(const ::autonomous_locking::Target_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x563c719c20ae1eacULL;
  static const uint64_t static_value2 = 0xdb952c207c883d48ULL;
};

template<class ContainerAllocator>
struct DataType< ::autonomous_locking::Target_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autonomous_locking/Target";
  }

  static const char* value(const ::autonomous_locking::Target_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autonomous_locking::Target_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 id\n"
"geometry_msgs/Pose pose\n"
"geometry_msgs/Twist velocity\n"
"float32 heading\n"
"float32 speed\n"
"float32 time_delay\n"
"\n"
"float32 distance\n"
"float32 tail_angle\n"
"float32 heading_alignment\n"
"float32 zone_score\n"
"float32 total_cost\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3 linear\n"
"Vector3 angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::autonomous_locking::Target_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autonomous_locking::Target_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.pose);
      stream.next(m.velocity);
      stream.next(m.heading);
      stream.next(m.speed);
      stream.next(m.time_delay);
      stream.next(m.distance);
      stream.next(m.tail_angle);
      stream.next(m.heading_alignment);
      stream.next(m.zone_score);
      stream.next(m.total_cost);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Target_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autonomous_locking::Target_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autonomous_locking::Target_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "pose: ";
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "velocity: ";
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "heading: ";
    Printer<float>::stream(s, indent + "  ", v.heading);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "time_delay: ";
    Printer<float>::stream(s, indent + "  ", v.time_delay);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "distance: ";
    Printer<float>::stream(s, indent + "  ", v.distance);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "tail_angle: ";
    Printer<float>::stream(s, indent + "  ", v.tail_angle);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "heading_alignment: ";
    Printer<float>::stream(s, indent + "  ", v.heading_alignment);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "zone_score: ";
    Printer<float>::stream(s, indent + "  ", v.zone_score);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "total_cost: ";
    Printer<float>::stream(s, indent + "  ", v.total_cost);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTONOMOUS_LOCKING_MESSAGE_TARGET_H
