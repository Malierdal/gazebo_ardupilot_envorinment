# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from autonomous_locking/Target.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class Target(genpy.Message):
  _md5sum = "563c719c20ae1eacdb952c207c883d48"
  _type = "autonomous_locking/Target"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 id
geometry_msgs/Pose pose
geometry_msgs/Twist velocity
float32 heading
float32 speed
float32 time_delay

float32 distance
float32 tail_angle
float32 heading_alignment
float32 zone_score
float32 total_cost

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3 linear
Vector3 angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['id','pose','velocity','heading','speed','time_delay','distance','tail_angle','heading_alignment','zone_score','total_cost']
  _slot_types = ['int32','geometry_msgs/Pose','geometry_msgs/Twist','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,pose,velocity,heading,speed,time_delay,distance,tail_angle,heading_alignment,zone_score,total_cost

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Target, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Twist()
      if self.heading is None:
        self.heading = 0.
      if self.speed is None:
        self.speed = 0.
      if self.time_delay is None:
        self.time_delay = 0.
      if self.distance is None:
        self.distance = 0.
      if self.tail_angle is None:
        self.tail_angle = 0.
      if self.heading_alignment is None:
        self.heading_alignment = 0.
      if self.zone_score is None:
        self.zone_score = 0.
      if self.total_cost is None:
        self.total_cost = 0.
    else:
      self.id = 0
      self.pose = geometry_msgs.msg.Pose()
      self.velocity = geometry_msgs.msg.Twist()
      self.heading = 0.
      self.speed = 0.
      self.time_delay = 0.
      self.distance = 0.
      self.tail_angle = 0.
      self.heading_alignment = 0.
      self.zone_score = 0.
      self.total_cost = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i13d8f().pack(_x.id, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.velocity.linear.x, _x.velocity.linear.y, _x.velocity.linear.z, _x.velocity.angular.x, _x.velocity.angular.y, _x.velocity.angular.z, _x.heading, _x.speed, _x.time_delay, _x.distance, _x.tail_angle, _x.heading_alignment, _x.zone_score, _x.total_cost))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Twist()
      end = 0
      _x = self
      start = end
      end += 140
      (_x.id, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.velocity.linear.x, _x.velocity.linear.y, _x.velocity.linear.z, _x.velocity.angular.x, _x.velocity.angular.y, _x.velocity.angular.z, _x.heading, _x.speed, _x.time_delay, _x.distance, _x.tail_angle, _x.heading_alignment, _x.zone_score, _x.total_cost,) = _get_struct_i13d8f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i13d8f().pack(_x.id, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.velocity.linear.x, _x.velocity.linear.y, _x.velocity.linear.z, _x.velocity.angular.x, _x.velocity.angular.y, _x.velocity.angular.z, _x.heading, _x.speed, _x.time_delay, _x.distance, _x.tail_angle, _x.heading_alignment, _x.zone_score, _x.total_cost))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Twist()
      end = 0
      _x = self
      start = end
      end += 140
      (_x.id, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.velocity.linear.x, _x.velocity.linear.y, _x.velocity.linear.z, _x.velocity.angular.x, _x.velocity.angular.y, _x.velocity.angular.z, _x.heading, _x.speed, _x.time_delay, _x.distance, _x.tail_angle, _x.heading_alignment, _x.zone_score, _x.total_cost,) = _get_struct_i13d8f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i13d8f = None
def _get_struct_i13d8f():
    global _struct_i13d8f
    if _struct_i13d8f is None:
        _struct_i13d8f = struct.Struct("<i13d8f")
    return _struct_i13d8f
